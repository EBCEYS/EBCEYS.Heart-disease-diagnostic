version: '3.4'

services:
  diagnoserestservice:
    image: ${DOCKER_REGISTRY-}diagnoserestservice
    container_name: 'diagnoserestservice'
    build:
      context: .
      dockerfile: DiagnoseRESTService/Dockerfile
    ports:
        - "80:80"
    depends_on:
      - rabbitmq
      - redis

  authservice:
    image: ${DOCKER_REGISTRY-}authservice
    container_name: 'authservice'
    build:
      context: .
      dockerfile: AuthService/Dockerfile
    ports:
        - 5000:5000
    healthcheck:
        test: curl --fail http://localhost:5000/isAlive || exit 1
        interval: 5s
        timeout: 10s
        retries: 3
    depends_on:
      - rabbitmq
      - redis
  
  diagnosereceiver:
    image: ${DOCKER_REGISTRY-}diagnosereceiver
    container_name: 'diagnosereceiver'
    build:
      context: .
      dockerfile: DiagnoseReceiver/Dockerfile
    ports:
        - 1000:1000
    depends_on:
      - rabbitmq


  rabbitmqtohttploadbalancingservice:
    image: ${DOCKER_REGISTRY-}rabbitmqtohttploadbalancingservice
    container_name: 'rabbitmqtohttploadbalancingservice'
    build:
      context: .
      dockerfile: RabbitMQToHTTPLoadBalancingService/Dockerfile
    depends_on:
      - rabbitmq
  
  definedataservice:
    image: ${DOCKER_REGISTRY-}definedataservice
    container_name: 'definedataservice'
    build:
      context: .
      dockerfile: DefineDataService/Dockerfile
    depends_on:
      - rabbitmq

  alertstorageservice:
    image: ${DOCKER_REGISTRY-}alertstorageservice
    container_name: 'alertstorageservice'
    build:
      context: .
      dockerfile: AlertStorageService/Dockerfile
    depends_on:
      - rabbitmq

  diagnosecardiovascularservice:
    image: ${DOCKER_REGISTRY-}diagnosecardiovascularservice
    container_name: 'diagnosecardiovascularservice'
    build:
      context: .
      dockerfile: DiagnoseCardiovascularService/Dockerfile
    depends_on:
      - rabbitmq


  usersdbadapter:
    image: ${DOCKER_REGISTRY-}usersdbadapter
    container_name: 'usersdbadapter'
    build:
      context: .
      dockerfile: UsersDBAdapter/Dockerfile
    depends_on:
      - rabbitmq


  dbadapterservice:
    image: ${DOCKER_REGISTRY-}dbadapterservice
    container_name: 'dbadapterservice'
    build:
      context: .
      dockerfile: DBAdapterService/Dockerfile
    depends_on:
      - rabbitmq

  jwtcachecheker:
    image: ${DOCKER_REGISTRY-}jwtcachechecker
    container_name: 'jwt_cache_checker'
    build:
      context: .
      dockerfile: JwtCacheChecker/Dockerfile
    depends_on:
      - redis
      - rabbitmq

  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: 'rabbitmq'
    ports:
        - "5673:5672"
        - "15673:15672"

  postgres:
    image: postgres:13.3
    container_name: 'DB_PostgreSQL'
    volumes:
      - .:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_DB: "DiagnoseResultsDB"
      POSTGRES_USER: "adm"
      POSTGRES_PASSWORD: "adm"
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U adm -d DiagnoseResultsDB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G

  pgadmin:
    container_name: 'DB_PGAdmin'
    image: dpage/pgadmin4:6.14
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: secret
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "8080:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  redis:
    image: "redis/redis-stack:latest"
    container_name: "redis"
    #command: redis-stack /tmp/redis.conf --bind redis --maxmemory-policy allkeys-lru --appendonly yes
    ports:
     - 6379:6379
     - 8001:8001
    volumes:
      - ./redis.conf:/tmp/redis.conf
    environment:
     - REDIS_REPLICATION_MODE=master
    #networks:
    #  node_net:
    #    ipv4_address: 172.28.1.4


networks:
  node_net:
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
volumes:
  db-data:
  pgadmin-data:
  redis-data:
  redis-conf:

